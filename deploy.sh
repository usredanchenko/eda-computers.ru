#!/bin/bash

# EDA Computers Deployment Script
# –°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–µ–ø–ª–æ—è —Å–∏—Å—Ç–µ–º—ã EDA Computers

set -e  # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ

echo "üöÄ –ù–∞—á–∏–Ω–∞–µ–º –¥–µ–ø–ª–æ–π EDA Computers..."

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è Docker
check_docker() {
    log_info "–ü—Ä–æ–≤–µ—Ä—è–µ–º Docker..."
    if ! command -v docker &> /dev/null; then
        log_error "Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!"
        exit 1
    fi
    
    if ! command -v docker-compose &> /dev/null; then
        log_error "Docker Compose –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!"
        exit 1
    fi
    
    log_success "Docker –∏ Docker Compose –Ω–∞–π–¥–µ–Ω—ã"
}

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
stop_containers() {
    log_info "–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã..."
    docker-compose down --remove-orphans || true
    log_success "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
}

# –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –æ–±—Ä–∞–∑–æ–≤
cleanup_images() {
    log_info "–û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–∑—ã..."
    docker system prune -f || true
    log_success "–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
}

# –°–±–æ—Ä–∫–∞ –æ–±—Ä–∞–∑–æ–≤
build_images() {
    log_info "–°–æ–±–∏—Ä–∞–µ–º Docker –æ–±—Ä–∞–∑—ã..."
    
    # –°–±–æ—Ä–∫–∞ server
    log_info "–°–æ–±–∏—Ä–∞–µ–º server –æ–±—Ä–∞–∑..."
    docker-compose build server
    
    # –°–±–æ—Ä–∫–∞ web
    log_info "–°–æ–±–∏—Ä–∞–µ–º web –æ–±—Ä–∞–∑..."
    docker-compose build web
    
    log_success "–í—Å–µ –æ–±—Ä–∞–∑—ã —Å–æ–±—Ä–∞–Ω—ã"
}

# –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤
start_services() {
    log_info "–ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã..."
    
    # –ó–∞–ø—É—Å–∫ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ Redis
    log_info "–ó–∞–ø—É—Å–∫–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ Redis..."
    docker-compose up -d postgres redis
    
    # –ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    log_info "–ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."
    timeout=60
    while [ $timeout -gt 0 ]; do
        if docker-compose exec -T postgres pg_isready -U eda_user -d eda_computers > /dev/null 2>&1; then
            log_success "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞"
            break
        fi
        sleep 2
        timeout=$((timeout - 2))
    done
    
    if [ $timeout -le 0 ]; then
        log_error "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª–∞—Å—å –∑–∞ –æ—Ç–≤–µ–¥–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è"
        exit 1
    fi
    
    # –ó–∞–ø—É—Å–∫ server
    log_info "–ó–∞–ø—É—Å–∫–∞–µ–º server..."
    docker-compose up -d server
    
    # –ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ server
    log_info "–ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ server..."
    timeout=60
    while [ $timeout -gt 0 ]; do
        if curl -f http://localhost:3001/health > /dev/null 2>&1; then
            log_success "Server –≥–æ—Ç–æ–≤"
            break
        fi
        sleep 2
        timeout=$((timeout - 2))
    done
    
    if [ $timeout -le 0 ]; then
        log_error "Server –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è –∑–∞ –æ—Ç–≤–µ–¥–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è"
        exit 1
    fi
    
    # –ó–∞–ø—É—Å–∫ web
    log_info "–ó–∞–ø—É—Å–∫–∞–µ–º web –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ..."
    docker-compose up -d web
    
    # –ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ web
    log_info "–ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ web –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è..."
    timeout=60
    while [ $timeout -gt 0 ]; do
        if curl -f http://localhost:3000 > /dev/null 2>&1; then
            log_success "Web –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ"
            break
        fi
        sleep 2
        timeout=$((timeout - 2))
    done
    
    if [ $timeout -le 0 ]; then
        log_error "Web –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª–æ—Å—å –∑–∞ –æ—Ç–≤–µ–¥–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è"
        exit 1
    fi
    
    # –ó–∞–ø—É—Å–∫ nginx
    log_info "–ó–∞–ø—É—Å–∫–∞–µ–º nginx..."
    docker-compose up -d nginx
    
    log_success "–í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã
health_check() {
    log_info "–ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ —Å–∏—Å—Ç–µ–º—ã..."
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    if docker-compose exec -T postgres pg_isready -U eda_user -d eda_computers > /dev/null 2>&1; then
        log_success "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: OK"
    else
        log_error "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: FAILED"
        return 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Redis
    if docker-compose exec -T redis redis-cli ping > /dev/null 2>&1; then
        log_success "Redis: OK"
    else
        log_error "Redis: FAILED"
        return 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ server
    if curl -f http://localhost:3001/health > /dev/null 2>&1; then
        log_success "Server: OK"
    else
        log_error "Server: FAILED"
        return 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ web
    if curl -f http://localhost:3000 > /dev/null 2>&1; then
        log_success "Web: OK"
    else
        log_error "Web: FAILED"
        return 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ nginx
    if curl -f http://localhost/health > /dev/null 2>&1; then
        log_success "Nginx: OK"
    else
        log_error "Nginx: FAILED"
        return 1
    fi
    
    log_success "–í—Å–µ —Å–µ—Ä–≤–∏—Å—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
}

# –ü–æ–∫–∞–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–µ–ø–ª–æ–µ
show_info() {
    echo ""
    echo "üéâ –î–µ–ø–ª–æ–π EDA Computers –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!"
    echo ""
    echo "üìä –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤:"
    docker-compose ps
    echo ""
    echo "üåê –î–æ—Å—Ç—É–ø–Ω—ã–µ URL:"
    echo "   Frontend (HTTP):  http://localhost:3000"
    echo "   Frontend (HTTPS): https://localhost"
    echo "   Backend API:      http://localhost:3001"
    echo "   Health Check:     http://localhost/health"
    echo ""
    echo "üîê –¢–µ—Å—Ç–æ–≤—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã:"
    echo "   Admin:  admin@eda.com / password"
    echo "   User:   ivan@example.com / password"
    echo ""
    echo "üìù –õ–æ–≥–∏:"
    echo "   docker-compose logs -f [service_name]"
    echo ""
    echo "üõ†Ô∏è  –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:"
    echo "   –û—Å—Ç–∞–Ω–æ–≤–∫–∞:  docker-compose down"
    echo "   –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫: docker-compose restart"
    echo "   –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ: ./deploy.sh"
    echo ""
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    log_info "–ù–∞—á–∏–Ω–∞–µ–º –¥–µ–ø–ª–æ–π EDA Computers..."
    
    check_docker
    stop_containers
    cleanup_images
    build_images
    start_services
    health_check
    show_info
    
    log_success "–î–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ! üöÄ"
}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
case "${1:-}" in
    "stop")
        log_info "–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º EDA Computers..."
        docker-compose down
        log_success "–°–µ—Ä–≤–∏—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
        ;;
    "restart")
        log_info "–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º EDA Computers..."
        docker-compose restart
        log_success "–°–µ—Ä–≤–∏—Å—ã –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω—ã"
        ;;
    "logs")
        log_info "–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–æ–≥–∏..."
        docker-compose logs -f "${2:-}"
        ;;
    "status")
        log_info "–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤:"
        docker-compose ps
        ;;
    "clean")
        log_info "–ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞..."
        docker-compose down -v --remove-orphans
        docker system prune -af
        log_success "–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
        ;;
    *)
        main
        ;;
esac
