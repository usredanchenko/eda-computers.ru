'use client';

import { useState, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import Link from 'next/link';
import { Component } from '@/types';
import { calculateBuild } from '@/lib/calculations';
import { saveDraft, generateDraftName, getDraftsStats } from '@/lib/drafts';
import ComponentCard from './ComponentCard';
import PerformanceBlock from './PerformanceBlock';
import PsuCompatibilityChecker from './PsuCompatibilityChecker';
import DraftsManager from './DraftsManager';
import BudgetMode from './BudgetMode';
import LoadingSpinner from './LoadingSpinner';
import OrderModal from './OrderModal';

interface PcConfiguratorProps {
  components: Component[];
  builds?: Record<string, unknown>[];
  className?: string;
}

const CATEGORIES = [
  { id: 1, name: '–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä—ã', icon: 'üñ•Ô∏è', description: 'CPU' },
  { id: 2, name: '–ú–∞—Ç–µ—Ä–∏–Ω—Å–∫–∏–µ –ø–ª–∞—Ç—ã', icon: 'üîå', description: 'Motherboard' },
  { id: 3, name: '–í–∏–¥–µ–æ–∫–∞—Ä—Ç—ã', icon: 'üéÆ', description: 'GPU' },
  { id: 4, name: '–û–ø–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–º—è—Ç—å', icon: 'üíæ', description: 'RAM' },
  { id: 5, name: '–ù–∞–∫–æ–ø–∏—Ç–µ–ª–∏', icon: 'üíø', description: 'Storage' },
  { id: 6, name: '–ë–ª–æ–∫–∏ –ø–∏—Ç–∞–Ω–∏—è', icon: '‚ö°', description: 'PSU' }
];

export default function PcConfigurator({ components, builds = [], className = '' }: PcConfiguratorProps) {
  const [selectedCategory, setSelectedCategory] = useState<number>(1);
  const [selectedComponents, setSelectedComponents] = useState<Component[]>([]);
  const [showPerformance, setShowPerformance] = useState(false);
  const [isMobile, setIsMobile] = useState(false);
  const [showDraftsManager, setShowDraftsManager] = useState(false);
  const [showBudgetMode, setShowBudgetMode] = useState(false);
  const [showOrderModal, setShowOrderModal] = useState(false);
  const [budget] = useState<number>(200000);
  const [draftsStats, setDraftsStats] = useState(getDraftsStats());
  const [loading, setLoading] = useState(true);

  // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–æ–±–∏–ª—å–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
  useEffect(() => {
    const checkMobile = () => {
      setIsMobile(window.innerWidth <= 768);
    };
    
    checkMobile();
    window.addEventListener('resize', checkMobile);
    return () => window.removeEventListener('resize', checkMobile);
  }, []);

  // –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
  useEffect(() => {
    const timer = setTimeout(() => {
      setLoading(false);
    }, 1500);
    
    return () => clearTimeout(timer);
  }, []);

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —á–µ—Ä–Ω–æ–≤–∏–∫–æ–≤
  useEffect(() => {
    setDraftsStats(getDraftsStats());
  }, [selectedComponents]);

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  const filteredComponents = components.filter(c => c.category_id === selectedCategory);

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  const getSelectedComponent = (categoryId: number) => {
    return selectedComponents.find(c => c.category_id === categoryId);
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  const handleComponentSelect = (component: Component) => {
    setSelectedComponents(prev => {
      const filtered = prev.filter(c => c.category_id !== component.category_id);
      return [...filtered, component];
    });
  };

  // –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  const handleComponentRemove = (categoryId: number) => {
    setSelectedComponents(prev => prev.filter(c => c.category_id !== categoryId));
  };

  // –ó–∞–≥—Ä—É–∑–∫–∞ —á–µ—Ä–Ω–æ–≤–∏–∫–∞
  const handleLoadDraft = (components: Component[]) => {
    setSelectedComponents(components);
  };

  // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å–±–æ—Ä–∫–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ —ç–∫–æ–Ω–æ–º–∏–∏
  const handleApplyBudgetBuild = (components: Component[]) => {
    setSelectedComponents(components);
    setShowBudgetMode(false);
  };

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —á–µ—Ä–Ω–æ–≤–∏–∫–∞
  const handleSaveDraft = () => {
    if (selectedComponents.length === 0) {
      alert('–ù–µ—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
      return;
    }

    const draftName = generateDraftName(selectedComponents);
    const buildCalculation = calculateBuild(selectedComponents);
    saveDraft({
      name: draftName,
      components: selectedComponents,
      calculation: buildCalculation
    });
    setDraftsStats(getDraftsStats());
  };

  // –°–±–æ—Ä–∫–∞ –∑–∞–∫–∞–∑–∞
  const handleBuildOrder = () => {
    if (selectedComponents.length < 6) {
      alert('–í—ã–±–µ—Ä–∏—Ç–µ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã');
      return;
    }

    setShowOrderModal(true);
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
  const handleOrderComplete = (orderId: string) => {
    console.log('–ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω:', orderId);
    // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É
  };

  // –†–∞—Å—á—ë—Ç —Å–±–æ—Ä–∫–∏
  const buildCalculation = calculateBuild(selectedComponents);
  const budgetUsed = (buildCalculation.totalPrice / budget) * 100;

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
  if (loading) {
    return (
      <div className={`min-h-screen bg-gradient-to-br from-dark-900 via-dark-800 to-dark-900 ${className} flex items-center justify-center`}>
        <LoadingSpinner 
          size="lg" 
          text="–ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä..." 
          className="text-center"
        />
      </div>
    );
  }

  return (
    <div className={`min-h-screen bg-gradient-to-br from-dark-900 via-dark-800 to-dark-900 ${className}`}>
      <div className="max-w-7xl mx-auto px-4 py-6 sm:py-8 pb-28 md:pb-8">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <motion.div
          initial={{ opacity: 0, y: -20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.8 }}
          className="text-center mb-8"
        >
          <h1 className="text-2xl sm:text-3xl md:text-5xl font-bold mb-3 sm:mb-4">
            <span className="text-gradient">–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –ü–ö</span>
          </h1>
          <p className="text-base sm:text-xl text-gray-300 max-w-2xl mx-auto">
            –°–æ–±–µ—Ä–∏ —Å–≤–æ–π –∏–¥–µ–∞–ª—å–Ω—ã–π –∫–æ–º–ø—å—é—Ç–µ—Ä —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
          </p>
        </motion.div>

        {/* –õ–æ–∫–∞–ª—å–Ω—ã–µ –Ω–∞–≤-—Å—Å—ã–ª–∫–∏ —É–¥–∞–ª–µ–Ω—ã: –≥–ª–æ–±–∞–ª—å–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è —É–∂–µ –µ—Å—Ç—å –≤ Layout */}

        {/* –ü–∞–Ω–µ–ª—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ */}
        <div className="flex flex-col md:flex-row items-stretch md:items-center justify-between gap-4 mb-6">
          {/* –°—á–µ—Ç—á–∏–∫ –±—é–¥–∂–µ—Ç–∞ */}
          <div className="flex items-center gap-3 sm:gap-4">
            <div className="text-center">
              <div className="text-neon-cyan text-xl sm:text-2xl font-bold">
                {new Intl.NumberFormat('ru-RU', {
                  style: 'currency',
                  currency: 'RUB',
                  minimumFractionDigits: 0
                }).format(buildCalculation.totalPrice)}
              </div>
              <div className="text-gray-300 text-xs sm:text-sm">–°—Ç–æ–∏–º–æ—Å—Ç—å</div>
            </div>
            
            <div className="text-center">
              <div className={`text-xl sm:text-2xl font-bold ${
                budgetUsed > 90 ? 'text-neon-red' : 
                budgetUsed > 75 ? 'text-neon-yellow' : 'text-neon-green'
              }`}>
                {budgetUsed.toFixed(1)}%
              </div>
              <div className="text-gray-300 text-xs sm:text-sm">–ë—é–¥–∂–µ—Ç–∞</div>
            </div>

            <div className="w-32 h-2 bg-dark-800 rounded-full overflow-hidden">
              <motion.div
                className={`h-full ${
                  budgetUsed > 90 ? 'bg-neon-red' : 
                  budgetUsed > 75 ? 'bg-neon-yellow' : 'bg-neon-green'
                }`}
                initial={{ width: 0 }}
                animate={{ width: `${Math.min(budgetUsed, 100)}%` }}
                transition={{ duration: 0.5 }}
              />
            </div>
          </div>

          {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */}
          <div className="flex flex-col sm:flex-row gap-2 w-full md:w-auto">
            <motion.button
              onClick={() => setShowBudgetMode(true)}
              className="w-full sm:w-auto px-4 py-2 border border-neon-pink text-neon-pink rounded hover:bg-neon-pink hover:text-dark-950 transition-all duration-300"
              whileHover={{ scale: 1.05 }}
              whileTap={{ scale: 0.95 }}
            >
              üí∞ –†–µ–∂–∏–º —ç–∫–æ–Ω–æ–º–∏–∏
            </motion.button>
            
            <motion.button
              onClick={() => setShowDraftsManager(true)}
              className="w-full sm:w-auto px-4 py-2 border border-neon-cyan text-neon-cyan rounded hover:bg-neon-cyan hover:text-dark-950 transition-all duration-300"
              whileHover={{ scale: 1.05 }}
              whileTap={{ scale: 0.95 }}
            >
              üìù –ß–µ—Ä–Ω–æ–≤–∏–∫–∏ ({draftsStats.total})
            </motion.button>
            
            <motion.button
              onClick={handleSaveDraft}
              disabled={selectedComponents.length === 0}
              className="w-full sm:w-auto px-4 py-2 bg-neon-cyan text-dark-950 rounded font-bold disabled:opacity-50 disabled:cursor-not-allowed"
              whileHover={{ scale: selectedComponents.length > 0 ? 1.05 : 1 }}
              whileTap={{ scale: selectedComponents.length > 0 ? 0.95 : 1 }}
            >
              üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
            </motion.button>
          </div>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
          {/* –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - –í—ã–±–æ—Ä –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ */}
          <div className="lg:col-span-2">
            {/* –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ */}
            <>
              <h2 className="text-lg sm:text-xl font-bold text-white mb-3 sm:mb-4">–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é</h2>
              <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-6 gap-3">
                {CATEGORIES.map((category) => (
                  <motion.button
                    key={category.id}
                    onClick={() => setSelectedCategory(category.id)}
                    className={`p-3 rounded-lg border-2 transition-all duration-300 ${
                      selectedCategory === category.id
                        ? 'border-neon-cyan bg-neon-cyan/10'
                        : 'border-gray-600 hover:border-neon-cyan hover:bg-neon-cyan/5'
                    }`}
                    whileHover={{ scale: 1.05 }}
                    whileTap={{ scale: 0.95 }}
                  >
                    <div className="text-2xl mb-1">{category.icon}</div>
                    <div className="text-white font-semibold text-xs">{category.name}</div>
                  </motion.button>
                ))}
              </div>
            </>

            {/* –í—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã */}
            {selectedComponents.length > 0 && (
              <>
                <h2 className="text-lg sm:text-xl font-bold text-white mb-3 sm:mb-4">–í—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã</h2>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  {CATEGORIES.map((category) => {
                    const component = getSelectedComponent(category.id);
                    if (!component) return null;

                    return (
                      <motion.div
                        key={category.id}
                        initial={{ opacity: 0, x: -20 }}
                        animate={{ opacity: 1, x: 0 }}
                        className="flex items-center justify-between p-3 bg-dark-800/50 rounded-lg"
                      >
                        <div className="flex items-center gap-3">
                          <span className="text-2xl">{category.icon}</span>
                          <div>
                            <div className="text-white font-semibold text-sm">{component.name}</div>
                            <div className="text-neon-cyan text-sm">
                              {new Intl.NumberFormat('ru-RU', {
                                style: 'currency',
                                currency: 'RUB',
                                minimumFractionDigits: 0
                              }).format(component.price)}
                            </div>
                          </div>
                        </div>
                        <motion.button
                          onClick={() => handleComponentRemove(category.id)}
                          className="p-1 text-red-400 hover:text-red-300 transition-colors"
                          whileHover={{ scale: 1.1 }}
                          whileTap={{ scale: 0.9 }}
                        >
                          ‚úï
                        </motion.button>
                      </motion.div>
                    );
                  })}
                </div>
              </>
            )}

            {/* –°–ø–∏—Å–æ–∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ */}
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              className="glass-card p-3 sm:p-4"
            >
              <div className="flex items-center justify-between mb-4">
                <h2 className="text-lg sm:text-xl font-bold text-white">
                  {CATEGORIES.find(c => c.id === selectedCategory)?.name}
                </h2>
                <span className="text-gray-400 text-sm">
                  {filteredComponents.length} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
                </span>
              </div>

              <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-3 sm:gap-4">
                {filteredComponents.map((component) => (
                  <ComponentCard
                    key={component.id}
                    component={component}
                    isSelected={getSelectedComponent(component.category_id)?.id === component.id}
                    onSelect={handleComponentSelect}
                    showFps={true}
                  />
                ))}
              </div>
            </motion.div>
          </div>

          {/* –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å - –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å */}
          <div className="space-y-6">
            {/* –ë–ª–æ–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ */}
            {selectedComponents.length > 0 && (
              <PerformanceBlock calculation={buildCalculation} />
            )}

            {/* –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –ë–ü */}
            {selectedComponents.length > 0 && (
              <PsuCompatibilityChecker
                selectedComponents={selectedComponents}
                selectedPsu={getSelectedComponent(6) || null}
                onPsuSelect={handleComponentSelect}
                availablePsus={components.filter(c => c.category_id === 6)}
              />
            )}

            {/* –ö–Ω–æ–ø–∫–∞ –ø–æ–∫–∞–∑–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö */}
            {isMobile && selectedComponents.length > 0 && (
              <motion.button
                onClick={() => setShowPerformance(!showPerformance)}
                className="w-full neon-button py-3"
                whileHover={{ scale: 1.02 }}
                whileTap={{ scale: 0.98 }}
              >
                {showPerformance ? '–°–∫—Ä—ã—Ç—å' : '–ü–æ–∫–∞–∑–∞—Ç—å'} –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
              </motion.button>
            )}

            {/* –ú–æ–±–∏–ª—å–Ω–∞—è –ø–∞–Ω–µ–ª—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ */}
            <AnimatePresence>
              {isMobile && showPerformance && selectedComponents.length > 0 && (
                <motion.div
                  initial={{ opacity: 0, height: 0 }}
                  animate={{ opacity: 1, height: 'auto' }}
                  exit={{ opacity: 0, height: 0 }}
                  className="lg:hidden"
                >
                  <PerformanceBlock calculation={buildCalculation} />
                </motion.div>
              )}
            </AnimatePresence>
          </div>
        </div>

        {/* –ö–Ω–æ–ø–∫–∞ —Å–±–æ—Ä–∫–∏ –∑–∞–∫–∞–∑–∞ */}
        {selectedComponents.length >= 6 && (
          <>
            {/* Sticky-–∫–Ω–æ–ø–∫–∞ –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö */}
            <div className="fixed bottom-0 left-0 right-0 md:hidden z-40 bg-dark-900/90 backdrop-blur-sm border-t border-gray-800 px-4 py-3">
              <motion.button
                onClick={handleBuildOrder}
                className="w-full neon-button text-lg px-6 py-3"
                whileHover={{ scale: 1.02 }}
                whileTap={{ scale: 0.98 }}
              >
                –°–æ–±—Ä–∞—Ç—å –∑–∞–∫–∞–∑ –∑–∞ {new Intl.NumberFormat('ru-RU', {
                  style: 'currency',
                  currency: 'RUB',
                  minimumFractionDigits: 0
                }).format(buildCalculation.totalPrice)}
              </motion.button>
            </div>

            {/* –û–±—ã—á–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –Ω–∞ –¥–µ—Å–∫—Ç–æ–ø–µ */}
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              className="hidden md:block text-center mt-8"
            >
              <motion.button
                onClick={handleBuildOrder}
                className="neon-button text-xl px-8 py-4"
                whileHover={{ scale: 1.05 }}
                whileTap={{ scale: 0.95 }}
              >
                –°–æ–±—Ä–∞—Ç—å –∑–∞–∫–∞–∑ –∑–∞ {new Intl.NumberFormat('ru-RU', {
                  style: 'currency',
                  currency: 'RUB',
                  minimumFractionDigits: 0
                }).format(buildCalculation.totalPrice)}
              </motion.button>
            </motion.div>
          </>
        )}
      </div>

      {/* –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ */}
      <AnimatePresence>
        {showDraftsManager && (
          <DraftsManager
            onLoadDraft={handleLoadDraft}
            onClose={() => setShowDraftsManager(false)}
            builds={builds}
          />
        )}
      </AnimatePresence>

      <AnimatePresence>
        {showBudgetMode && (
          <BudgetMode
            components={components}
            onApplyBuild={handleApplyBudgetBuild}
            onClose={() => setShowBudgetMode(false)}
          />
        )}
      </AnimatePresence>

      <AnimatePresence>
        {showOrderModal && (
          <OrderModal
            isOpen={showOrderModal}
            onClose={() => setShowOrderModal(false)}
            onOrderComplete={handleOrderComplete}
            buildName="–ö–∞—Å—Ç–æ–º–Ω–∞—è —Å–±–æ—Ä–∫–∞"
            buildPrice={buildCalculation.totalPrice}
            buildComponents={selectedComponents}
          />
        )}
      </AnimatePresence>
    </div>
  );
}
