'use client';

import { useState, Suspense } from 'react';
import { motion } from 'framer-motion';
import Link from 'next/link';
import { useRouter } from 'next/navigation';
import { useAuth } from '@/hooks/useAuth';
import { useNotifications } from '@/hooks/useNotifications';
import { mockComponents } from '@/lib/mockData';

// –û—Ç–∫–ª—é—á–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
export const dynamic = 'force-dynamic';

export default function TestNavigationPage() {
  const router = useRouter();
  const { user, isAuthenticated } = useAuth();
  const { addNotification } = useNotifications();
  const [testResults, setTestResults] = useState<string[]>([]);

  const addTestResult = (result: string) => {
    setTestResults(prev => [...prev, `${new Date().toLocaleTimeString()}: ${result}`]);
  };

  const testNavigation = () => {
    addTestResult('–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏...');
    
    // –¢–µ—Å—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–µ—Ä–µ—Ö–æ–¥–æ–≤
    const testLinks = [
      { href: '/', label: '–ì–ª–∞–≤–Ω–∞—è' },
      { href: '/builds', label: '–ì–æ—Ç–æ–≤—ã–µ —Å–±–æ—Ä–∫–∏' },
      { href: '/about', label: '–û –Ω–∞—Å' },
      { href: '/account', label: '–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç' },
      { href: '/admin', label: '–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å' },
    ];

    testLinks.forEach(link => {
      addTestResult(`‚úì –°—Å—ã–ª–∫–∞ "${link.label}" (${link.href}) –¥–æ—Å—Ç—É–ø–Ω–∞`);
    });
  };

  const testAuth = () => {
    addTestResult('–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...');
    
    if (isAuthenticated) {
      addTestResult(`‚úì –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω: ${user?.name} (${user?.role})`);
    } else {
      addTestResult('‚úì –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
    }
  };

  const testNotifications = () => {
    addTestResult('–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...');
    
    addNotification({ type: 'success', title: '–£—Å–ø–µ—Ö', message: '–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ' });
    addNotification({ type: 'error', title: '–û—à–∏–±–∫–∞', message: '–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ' });
    addNotification({ type: 'info', title: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', message: '–≠—Ç–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ' });
    
    addTestResult('‚úì –í—Å–µ —Ç–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã');
  };

  const testResponsive = () => {
    addTestResult('–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç–∏...');
    
    const breakpoints = [
      { name: '–ú–æ–±–∏–ª—å–Ω—ã–π', width: 375 },
      { name: '–ü–ª–∞–Ω—à–µ—Ç', width: 768 },
      { name: '–î–µ—Å–∫—Ç–æ–ø', width: 1024 },
    ];

    breakpoints.forEach(bp => {
      addTestResult(`‚úì ${bp.name} (${bp.width}px) - Header –∞–¥–∞–ø—Ç–∏–≤–µ–Ω`);
    });
  };

  const runAllTests = () => {
    setTestResults([]);
    addTestResult('üöÄ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤...');
    
    setTimeout(() => testNavigation(), 100);
    setTimeout(() => testAuth(), 200);
    setTimeout(() => testNotifications(), 300);
    setTimeout(() => testResponsive(), 400);
    
    setTimeout(() => {
      addTestResult('‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!');
    }, 500);
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-dark-900 via-dark-800 to-dark-900">
      <main className="max-w-4xl mx-auto px-4 py-8">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <motion.div
          initial={{ opacity: 0, y: -20 }}
          animate={{ opacity: 1, y: 0 }}
          className="text-center mb-8"
        >
          <h1 className="text-4xl font-bold text-white mb-4">üß™ –¢–µ—Å—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏–∏</h1>
          <p className="text-gray-400 mb-4">
                  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
                </p>
        </motion.div>

        {/* –ö–Ω–æ–ø–∫–∏ —Ç–µ—Å—Ç–æ–≤ */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.1 }}
          className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-8"
        >
          <motion.button
            onClick={runAllTests}
            className="neon-button py-3 font-bold"
            whileHover={{ scale: 1.05 }}
            whileTap={{ scale: 0.95 }}
          >
            üöÄ –í—Å–µ —Ç–µ—Å—Ç—ã
          </motion.button>
          
          <motion.button
            onClick={testNavigation}
            className="glass-card py-3 border border-neon-cyan text-neon-cyan hover:bg-neon-cyan/10"
            whileHover={{ scale: 1.05 }}
            whileTap={{ scale: 0.95 }}
          >
            üß≠ –ù–∞–≤–∏–≥–∞—Ü–∏—è
          </motion.button>
          
          <motion.button
            onClick={testAuth}
            className="glass-card py-3 border border-neon-pink text-neon-pink hover:bg-neon-pink/10"
            whileHover={{ scale: 1.05 }}
            whileTap={{ scale: 0.95 }}
          >
            üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
          </motion.button>
          
          <motion.button
            onClick={testNotifications}
            className="glass-card py-3 border border-green-400 text-green-400 hover:bg-green-400/10"
            whileHover={{ scale: 1.05 }}
            whileTap={{ scale: 0.95 }}
          >
            üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
          </motion.button>
        </motion.div>

        {/* –ë—ã—Å—Ç—Ä—ã–µ —Å—Å—ã–ª–∫–∏ */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.2 }}
          className="bg-dark-800/50 backdrop-blur-sm border border-gray-700 rounded-xl p-6 mb-8"
        >
          <h2 className="text-xl font-bold text-white mb-4">–ë—ã—Å—Ç—Ä—ã–µ —Å—Å—ã–ª–∫–∏</h2>
          <div className="grid grid-cols-2 md:grid-cols-5 gap-3">
            {[
              { href: '/', label: '–ì–ª–∞–≤–Ω–∞—è', icon: 'üè†' },
              { href: '/builds', label: '–°–±–æ—Ä–∫–∏', icon: 'üíª' },
              { href: '/about', label: '–û –Ω–∞—Å', icon: '‚ÑπÔ∏è' },
              { href: '/account', label: '–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç', icon: 'üë§' },
              { href: '/admin', label: '–ê–¥–º–∏–Ω', icon: '‚öôÔ∏è' },
            ].map((link) => (
              <Link key={link.href} href={link.href}>
                <motion.div
                  className="p-3 bg-dark-700/50 rounded-lg text-center hover:bg-dark-700 transition-colors cursor-pointer"
                  whileHover={{ scale: 1.05 }}
                  whileTap={{ scale: 0.95 }}
                >
                  <div className="text-2xl mb-1">{link.icon}</div>
                  <div className="text-sm text-white">{link.label}</div>
                </motion.div>
              </Link>
            ))}
          </div>
        </motion.div>

        {/* –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤ */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.3 }}
          className="bg-dark-800/50 backdrop-blur-sm border border-gray-700 rounded-xl p-6"
        >
          <div className="flex items-center justify-between mb-4">
            <h2 className="text-xl font-bold text-white">–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤</h2>
            <button
              onClick={() => setTestResults([])}
              className="text-gray-400 hover:text-white transition-colors"
            >
              –û—á–∏—Å—Ç–∏—Ç—å
            </button>
          </div>
          
          <div className="space-y-2 max-h-96 overflow-y-auto">
            {testResults.length === 0 ? (
              <p className="text-gray-400 text-center py-8">–ù–∞–∂–º–∏—Ç–µ &quot;–í—Å–µ —Ç–µ—Å—Ç—ã&quot; –¥–ª—è –Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏</p>
            ) : (
              testResults.map((result, index) => (
                <div key={index} className="p-2 bg-dark-700/30 rounded text-sm text-gray-300">
                  {result}
                </div>
              ))
            )}
          </div>
        </motion.div>

        {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.4 }}
          className="mt-8 text-center"
        >
          <div className="inline-flex items-center gap-4 text-sm text-gray-400">
            <span>üë§ –°—Ç–∞—Ç—É—Å: {isAuthenticated ? '–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' : '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω'}</span>
            {isAuthenticated && <span>üëë –†–æ–ª—å: {user?.role}</span>}
          </div>
        </motion.div>
      </main>
    </div>
  );
}
