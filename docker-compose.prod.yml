services:
  # PostgreSQL база данных
  postgres:
    image: postgres:15-alpine
    container_name: eda-computers-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: eda_computers
      POSTGRES_USER: ${DB_USER:-eda_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db/init.sql:/docker-entrypoint-initdb.d/01-init.sql
      - ./db/clean_seed.sql:/docker-entrypoint-initdb.d/02-seed.sql
    networks:
      - eda-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-eda_user}"]
      interval: 30s
      timeout: 10s
      retries: 3
    security_opt:
      - no-new-privileges:true
    read_only: false

  # Redis для кэширования
  redis:
    image: redis:7-alpine
    container_name: eda-computers-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    networks:
      - eda-network
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    security_opt:
      - no-new-privileges:true

  # Express.js сервер
  server:
    build:
      context: .
      dockerfile: server/Dockerfile
    container_name: eda-computers-server
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - PORT=3001
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=eda_computers
      - DB_USER=${DB_USER:-postgres}
      - DB_PASSWORD=${DB_PASSWORD}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRES_IN=7d
      - FRONTEND_URL=${FRONTEND_URL}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379
      - CORS_ORIGIN=${CORS_ORIGIN}
      - LOG_LEVEL=info
      - YOOKASSA_SHOP_ID=${YOOKASSA_SHOP_ID}
      - YOOKASSA_SECRET_KEY=${YOOKASSA_SECRET_KEY}
      - YOOKASSA_WEBHOOK_SECRET=${YOOKASSA_WEBHOOK_SECRET}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - eda-network
    volumes:
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3001/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
      - /var/tmp

  # Next.js веб-приложение
  web:
    build:
      context: .
      dockerfile: apps/web/Dockerfile
    container_name: eda-computers-web
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - PORT=3000
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}
    depends_on:
      server:
        condition: service_healthy
    networks:
      - eda-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
      - /var/tmp

  # Nginx для обратного прокси
  nginx:
    image: nginx:alpine
    container_name: eda-computers-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - web
      - server
    networks:
      - eda-network
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
      - /var/cache/nginx
      - /var/run

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  nginx_logs:
    driver: local

networks:
  eda-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
